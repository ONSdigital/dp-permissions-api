// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-permissions-api/api"
	"github.com/ONSdigital/dp-permissions-api/models"
	"sync"
)

// Ensure, that PermissionsBundlerMock does implement api.PermissionsBundler.
// If this is not the case, regenerate this file with moq.
var _ api.PermissionsBundler = &PermissionsBundlerMock{}

// PermissionsBundlerMock is a mock implementation of api.PermissionsBundler.
//
// 	func TestSomethingThatUsesPermissionsBundler(t *testing.T) {
//
// 		// make and configure a mocked api.PermissionsBundler
// 		mockedPermissionsBundler := &PermissionsBundlerMock{
// 			GetFunc: func(ctx context.Context) (models.Bundle, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedPermissionsBundler in code that requires api.PermissionsBundler
// 		// and then make assertions.
//
// 	}
type PermissionsBundlerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context) (models.Bundle, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *PermissionsBundlerMock) Get(ctx context.Context) (models.Bundle, error) {
	if mock.GetFunc == nil {
		panic("PermissionsBundlerMock.GetFunc: method is nil but PermissionsBundler.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedPermissionsBundler.GetCalls())
func (mock *PermissionsBundlerMock) GetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
