// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-permissions-api/models"
	"github.com/ONSdigital/dp-permissions-api/service"
	"sync"
)

// Ensure, that PermissionsStoreMock does implement service.PermissionsStore.
// If this is not the case, regenerate this file with moq.
var _ service.PermissionsStore = &PermissionsStoreMock{}

// PermissionsStoreMock is a mock implementation of service.PermissionsStore.
//
//     func TestSomethingThatUsesPermissionsStore(t *testing.T) {
//
//         // make and configure a mocked service.PermissionsStore
//         mockedPermissionsStore := &PermissionsStoreMock{
//             AddPolicyFunc: func(ctx context.Context, policy *models.Policy) (*models.Policy, error) {
// 	               panic("mock out the AddPolicy method")
//             },
//             CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             GetAllPoliciesFunc: func(ctx context.Context) ([]*models.Policy, error) {
// 	               panic("mock out the GetAllPolicies method")
//             },
//             GetAllRolesFunc: func(ctx context.Context) ([]*models.Role, error) {
// 	               panic("mock out the GetAllRoles method")
//             },
//             GetRoleFunc: func(ctx context.Context, id string) (*models.Role, error) {
// 	               panic("mock out the GetRole method")
//             },
//             GetRolesFunc: func(ctx context.Context, offset int, limit int) (*models.Roles, error) {
// 	               panic("mock out the GetRoles method")
//             },
//         }
//
//         // use mockedPermissionsStore in code that requires service.PermissionsStore
//         // and then make assertions.
//
//     }
type PermissionsStoreMock struct {
	// AddPolicyFunc mocks the AddPolicy method.
	AddPolicyFunc func(ctx context.Context, policy *models.Policy) (*models.Policy, error)

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// GetAllPoliciesFunc mocks the GetAllPolicies method.
	GetAllPoliciesFunc func(ctx context.Context) ([]*models.Policy, error)

	// GetAllRolesFunc mocks the GetAllRoles method.
	GetAllRolesFunc func(ctx context.Context) ([]*models.Role, error)

	// GetRoleFunc mocks the GetRole method.
	GetRoleFunc func(ctx context.Context, id string) (*models.Role, error)

	// GetRolesFunc mocks the GetRoles method.
	GetRolesFunc func(ctx context.Context, offset int, limit int) (*models.Roles, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddPolicy holds details about calls to the AddPolicy method.
		AddPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Policy is the policy argument value.
			Policy *models.Policy
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllPolicies holds details about calls to the GetAllPolicies method.
		GetAllPolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllRoles holds details about calls to the GetAllRoles method.
		GetAllRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetRole holds details about calls to the GetRole method.
		GetRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetRoles holds details about calls to the GetRoles method.
		GetRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
	}
	lockAddPolicy      sync.RWMutex
	lockChecker        sync.RWMutex
	lockClose          sync.RWMutex
	lockGetAllPolicies sync.RWMutex
	lockGetAllRoles    sync.RWMutex
	lockGetRole        sync.RWMutex
	lockGetRoles       sync.RWMutex
}

// AddPolicy calls AddPolicyFunc.
func (mock *PermissionsStoreMock) AddPolicy(ctx context.Context, policy *models.Policy) (*models.Policy, error) {
	if mock.AddPolicyFunc == nil {
		panic("PermissionsStoreMock.AddPolicyFunc: method is nil but PermissionsStore.AddPolicy was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Policy *models.Policy
	}{
		Ctx:    ctx,
		Policy: policy,
	}
	mock.lockAddPolicy.Lock()
	mock.calls.AddPolicy = append(mock.calls.AddPolicy, callInfo)
	mock.lockAddPolicy.Unlock()
	return mock.AddPolicyFunc(ctx, policy)
}

// AddPolicyCalls gets all the calls that were made to AddPolicy.
// Check the length with:
//     len(mockedPermissionsStore.AddPolicyCalls())
func (mock *PermissionsStoreMock) AddPolicyCalls() []struct {
	Ctx    context.Context
	Policy *models.Policy
} {
	var calls []struct {
		Ctx    context.Context
		Policy *models.Policy
	}
	mock.lockAddPolicy.RLock()
	calls = mock.calls.AddPolicy
	mock.lockAddPolicy.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *PermissionsStoreMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("PermissionsStoreMock.CheckerFunc: method is nil but PermissionsStore.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedPermissionsStore.CheckerCalls())
func (mock *PermissionsStoreMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *PermissionsStoreMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("PermissionsStoreMock.CloseFunc: method is nil but PermissionsStore.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedPermissionsStore.CloseCalls())
func (mock *PermissionsStoreMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetAllPolicies calls GetAllPoliciesFunc.
func (mock *PermissionsStoreMock) GetAllPolicies(ctx context.Context) ([]*models.Policy, error) {
	if mock.GetAllPoliciesFunc == nil {
		panic("PermissionsStoreMock.GetAllPoliciesFunc: method is nil but PermissionsStore.GetAllPolicies was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllPolicies.Lock()
	mock.calls.GetAllPolicies = append(mock.calls.GetAllPolicies, callInfo)
	mock.lockGetAllPolicies.Unlock()
	return mock.GetAllPoliciesFunc(ctx)
}

// GetAllPoliciesCalls gets all the calls that were made to GetAllPolicies.
// Check the length with:
//     len(mockedPermissionsStore.GetAllPoliciesCalls())
func (mock *PermissionsStoreMock) GetAllPoliciesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllPolicies.RLock()
	calls = mock.calls.GetAllPolicies
	mock.lockGetAllPolicies.RUnlock()
	return calls
}

// GetAllRoles calls GetAllRolesFunc.
func (mock *PermissionsStoreMock) GetAllRoles(ctx context.Context) ([]*models.Role, error) {
	if mock.GetAllRolesFunc == nil {
		panic("PermissionsStoreMock.GetAllRolesFunc: method is nil but PermissionsStore.GetAllRoles was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllRoles.Lock()
	mock.calls.GetAllRoles = append(mock.calls.GetAllRoles, callInfo)
	mock.lockGetAllRoles.Unlock()
	return mock.GetAllRolesFunc(ctx)
}

// GetAllRolesCalls gets all the calls that were made to GetAllRoles.
// Check the length with:
//     len(mockedPermissionsStore.GetAllRolesCalls())
func (mock *PermissionsStoreMock) GetAllRolesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllRoles.RLock()
	calls = mock.calls.GetAllRoles
	mock.lockGetAllRoles.RUnlock()
	return calls
}

// GetRole calls GetRoleFunc.
func (mock *PermissionsStoreMock) GetRole(ctx context.Context, id string) (*models.Role, error) {
	if mock.GetRoleFunc == nil {
		panic("PermissionsStoreMock.GetRoleFunc: method is nil but PermissionsStore.GetRole was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetRole.Lock()
	mock.calls.GetRole = append(mock.calls.GetRole, callInfo)
	mock.lockGetRole.Unlock()
	return mock.GetRoleFunc(ctx, id)
}

// GetRoleCalls gets all the calls that were made to GetRole.
// Check the length with:
//     len(mockedPermissionsStore.GetRoleCalls())
func (mock *PermissionsStoreMock) GetRoleCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetRole.RLock()
	calls = mock.calls.GetRole
	mock.lockGetRole.RUnlock()
	return calls
}

// GetRoles calls GetRolesFunc.
func (mock *PermissionsStoreMock) GetRoles(ctx context.Context, offset int, limit int) (*models.Roles, error) {
	if mock.GetRolesFunc == nil {
		panic("PermissionsStoreMock.GetRolesFunc: method is nil but PermissionsStore.GetRoles was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Offset int
		Limit  int
	}{
		Ctx:    ctx,
		Offset: offset,
		Limit:  limit,
	}
	mock.lockGetRoles.Lock()
	mock.calls.GetRoles = append(mock.calls.GetRoles, callInfo)
	mock.lockGetRoles.Unlock()
	return mock.GetRolesFunc(ctx, offset, limit)
}

// GetRolesCalls gets all the calls that were made to GetRoles.
// Check the length with:
//     len(mockedPermissionsStore.GetRolesCalls())
func (mock *PermissionsStoreMock) GetRolesCalls() []struct {
	Ctx    context.Context
	Offset int
	Limit  int
} {
	var calls []struct {
		Ctx    context.Context
		Offset int
		Limit  int
	}
	mock.lockGetRoles.RLock()
	calls = mock.calls.GetRoles
	mock.lockGetRoles.RUnlock()
	return calls
}
