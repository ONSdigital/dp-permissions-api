swagger: "2.0"
info:
  title: dp-permissions-api
  description: "API for managing access control permissions for Digital Publishing API resources"
  version: 1.0.0
  license:
    name: "Open Government Licence v3.0"
    url: "http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"
basePath: "/v1"
schemes:
  - http
tags:
  - name: "roles"
    description: "Endpoints related to role groups"
  - name: "permissions"
    description: "Endpoints related to permissions"
  - name: "policies"
    description: "Endpoints related to policies"
parameters:
  limit:
    name: limit
    description: "Maximum number of items that will be returned. A value of zero will return an empty items array. The default value is 20, with a maxiumum cap of 1000."
    in: query
    required: false
    type: integer
    default: 20
  offset:
    name: offset
    description: "Starting index of the items array that will be returned. By default it is zero, meaning that the returned items will start from the beginning."
    in: query
    required: false
    type: integer
    default: 0

paths:

  /roles:
    get:
      security:
        - Authorization: []
      tags:
        - "roles"
      summary: "Returns a list of all roles"
      description: "Returns a paginated list of all roles. By default all roles are returned, but a subset can be returned by providing offset and limit query parameters."
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
      produces:
        - "application/json"
      responses:
        200:
          description: "Successfully returned a json object containing a list of all roles"
          schema:
            type: object
            properties:
              count:
                type: integer
                description: "The number of roles returned"
              total_count:
                type: integer
                description: "The total number of roles"
              offset:
                type: integer
                description: "The first row of resources to retrieve, starting at 0. Use this parameter as a pagination mechanism along with the limit parameter"
              limit:
                type: integer
                description: "The number of items returned per request"
              items:
                description: "A list of roles"
                type: array
                items:
                  $ref: "#/definitions/Role"
        400:
          description: |
            Invalid request, reasons can be one of the following:
              * query parameters incorrect offset provided
              * query parameters incorrect limit provided
        403:
          description: |
            Unauthorised request, reason is:
              * Requestor does not have necessary permissions to access this resource
        500:
          $ref: "#/responses/InternalError"

  /roles/{id}:
    get:
      security:
        - Authorization: []
      tags:
        - "roles"
      summary: "Returns a role"
      description: "Returns a role for a given id"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "Unique id of role"
          type: string
          required: true
      responses:
        200:
          description: "Successfully returned a role for a given id"
          schema:
            $ref: "#/definitions/Role"
        400:
          description: "Invalid request"
        403:
          description: "Unauthorised request"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /policies:
    post:
      security:
        - Authorization: []
      tags:
        - "policies"
      summary: "Adds a policy"
      description: "Adds a policy corresponding to the provided body in this request. A policy binds a role to specific members (groups or users) conditional on an attribute"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: Policy
          schema:
            $ref: "#/definitions/NewPolicy"
      responses:
        201:
          description: "Successfully added a policy"
          schema:
            $ref: "#/definitions/Policy"
        400:
          description: "Bad request. Invalid policy supplied"
        403:
          description: "Unauthorised request"
        500:
          $ref: "#/responses/InternalError"

  /policies/{id}:
    delete:
      security:
        - Authorization: []
      tags:
        - "policies"
      summary: "Removes a policy"
      description: "Removes a policy with a specific policy id."
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "Unique id of policy"
          type: string
          required: true
      responses:
        204:
          description: "Successfully deleted a policy for a given id"
        400:
          description: "Invalid request"
        403:
          description: "Unauthorised request"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"
    get:
      security:
        - Authorization: []
      tags:
        - "policies"
      summary: "Returns a policy"
      description: "Returns a policy for a given id"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "Unique id of policy"
          type: string
          required: true
      responses:
        200:
          description: "Successfully returned a policy for a given id"
          schema:
            $ref: "#/definitions/Policy"
        403:
          description: "Unauthorised request"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"
    put:
      security:
        - Authorization: []
      tags:
        - "policies"
      summary: "Upsert a policy"
      description: "Upsert a policy for a given id"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "Unique id of policy"
          type: string
          required: true
        - in: body
          name: Policy
          required: true
          schema:
            $ref: "#/definitions/NewPolicy"
      responses:
        200:
          description: "Successfully updated an existing policy for a given id"
        201:
          description: "Successfully created a new policy for a given id"
        400:
          description: "Invalid request"
        403:
          description: "Unauthorised request"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalError"

  /permissions-bundle:
    get:
      security: []
      tags:
        - "permissions"
      summary: "Returns the permissions bundle"
      description: "Returns the permissions bundle, an optimised format for evaluating permissions"
      produces:
        - "application/json"
      responses:
        200:
          description: "Successfully retrieved the permissions bundle"
          schema:
            $ref: "#/definitions/Bundle"
        400:
          description: "Invalid request"
        401:
          description: "Unauthorised request"
        403:
          description: "User is unauthorised for this role"
        500:
          $ref: "#/responses/InternalError"

responses:
  InternalError:
    description: "Failed to process the request due to an internal error"
  NotFound:
    description: "Requested id can not be found"

definitions:
  Role:
    type: object
    properties:
      id:
        $ref: "#/definitions/RoleId"
      role:
        description: "Name of role"
        type: string
        example: "admin"
      permissions:
        description: "A list of permissions associated with this role"
        type: array
        items:
          $ref: "#/definitions/PermissionString"
  PermissionString:
    type: string
    example: "legacy:read"
  Permission:
    type: object
    properties:
      id:
        description: "Unique id for a permission"
        type: string
        example: "1b"
      description:
        description: "Description for a permission"
        type: string
        example: "read only"
  Condition:
    type: object
    properties:
      attribute:
        $ref: "#/definitions/Attribute"
      operator:
        description: "operator of the condition"
        type: string
        enum: [StringEquals, StartsWith]
        example: "StringEquals"
      values:
        description: "List of truth condition values"
        type: array
        items:
          $ref: "#/definitions/Value"
        example: "read only"
  Attribute:
    description: "Attribute of the request"
    type: string
    example: "collection_id"
  Value:
    description: "value that needs to be satisfied"
    type: string
    example: "v1"
  RoleId:
    description: "Unique id for a role"
    type: string
    example: "1b"
  EntityId:
    description: "Unique id for an entity"
    type: string
    example: "groups/role-admin"
  BundlePolicy:
    type: object
    description: "Policy as contained in the bundle. Removes entities and role attributes"
    properties:
      id:
        description: "Unique id for this policy"
        type: string
      condition:
        $ref: "#/definitions/Condition"
        description: "A condition which needs to be true for the policy to be applicable"
  Policy:
    type: object
    properties:
      id:
        description: "Unique id for this policy"
        type: string
      entities:
        description: "A list of entities for this policy"
        type: array
        items:
          $ref: "#/definitions/EntityId"
      role:
        description: "Role for this policy"
        type: string
        example: "administrator"
      condition:
        $ref: "#/definitions/Condition"
        description: "a condition which needs to be true for the policy to be applicable"
  NewPolicy:
    type: object
    required:
      - entities
      - role
    properties:
      entities:
        description: "A list of entities for this policy"
        minItems: 1
        type: array
        items:
          $ref: "#/definitions/EntityId"
      role:
        description: "Role for this policy"
        type: string
      condition:
        description: "condition which needs to be true for the policy to be applicable"
        type: object
        $ref: "#/definitions/Condition"
          
  Bundle:
    description: "A map of permission ID to entity lookup map"
    type: object
    additionalProperties:
      description: "A map of entity ID to policy array"
      type: object
      additionalProperties:
        description: "A list of policies"
        type: array
        items:
          $ref: "#/definitions/BundlePolicy"
    example:
      legacy.read:
        group/publisher:
          - id: publisher
            condition:
              attribute: ""
              operator: ""
              values: []
        group/viewer:
          - id: viewer
            entities:
              - group/viewer
            role: viewer
            condition:
              attribute: "collection-id"
              operator: "StringEquals"
              values:
                - collection-765

securityDefinitions:
  Authorization:
    name: Authorization
    description: "Access token used by Auth service in a Bearer format"
    in: header
    type: apiKey
