// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-permissions-api/models"
	"github.com/ONSdigital/dp-permissions-api/permissions"
	"sync"
)

// Ensure, that StoreMock does implement permissions.Store.
// If this is not the case, regenerate this file with moq.
var _ permissions.Store = &StoreMock{}

// StoreMock is a mock implementation of permissions.Store.
//
//     func TestSomethingThatUsesStore(t *testing.T) {
//
//         // make and configure a mocked permissions.Store
//         mockedStore := &StoreMock{
//             GetAllBundlePoliciesFunc: func(ctx context.Context) ([]*models.BundlePolicy, error) {
// 	               panic("mock out the GetAllBundlePolicies method")
//             },
//             GetAllRolesFunc: func(ctx context.Context) ([]*models.Role, error) {
// 	               panic("mock out the GetAllRoles method")
//             },
//         }
//
//         // use mockedStore in code that requires permissions.Store
//         // and then make assertions.
//
//     }
type StoreMock struct {
	// GetAllBundlePoliciesFunc mocks the GetAllBundlePolicies method.
	GetAllBundlePoliciesFunc func(ctx context.Context) ([]*models.BundlePolicy, error)

	// GetAllRolesFunc mocks the GetAllRoles method.
	GetAllRolesFunc func(ctx context.Context) ([]*models.Role, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllBundlePolicies holds details about calls to the GetAllBundlePolicies method.
		GetAllBundlePolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllRoles holds details about calls to the GetAllRoles method.
		GetAllRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetAllBundlePolicies sync.RWMutex
	lockGetAllRoles          sync.RWMutex
}

// GetAllBundlePolicies calls GetAllBundlePoliciesFunc.
func (mock *StoreMock) GetAllBundlePolicies(ctx context.Context) ([]*models.BundlePolicy, error) {
	if mock.GetAllBundlePoliciesFunc == nil {
		panic("StoreMock.GetAllBundlePoliciesFunc: method is nil but Store.GetAllBundlePolicies was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllBundlePolicies.Lock()
	mock.calls.GetAllBundlePolicies = append(mock.calls.GetAllBundlePolicies, callInfo)
	mock.lockGetAllBundlePolicies.Unlock()
	return mock.GetAllBundlePoliciesFunc(ctx)
}

// GetAllBundlePoliciesCalls gets all the calls that were made to GetAllBundlePolicies.
// Check the length with:
//     len(mockedStore.GetAllBundlePoliciesCalls())
func (mock *StoreMock) GetAllBundlePoliciesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllBundlePolicies.RLock()
	calls = mock.calls.GetAllBundlePolicies
	mock.lockGetAllBundlePolicies.RUnlock()
	return calls
}

// GetAllRoles calls GetAllRolesFunc.
func (mock *StoreMock) GetAllRoles(ctx context.Context) ([]*models.Role, error) {
	if mock.GetAllRolesFunc == nil {
		panic("StoreMock.GetAllRolesFunc: method is nil but Store.GetAllRoles was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllRoles.Lock()
	mock.calls.GetAllRoles = append(mock.calls.GetAllRoles, callInfo)
	mock.lockGetAllRoles.Unlock()
	return mock.GetAllRolesFunc(ctx)
}

// GetAllRolesCalls gets all the calls that were made to GetAllRoles.
// Check the length with:
//     len(mockedStore.GetAllRolesCalls())
func (mock *StoreMock) GetAllRolesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllRoles.RLock()
	calls = mock.calls.GetAllRoles
	mock.lockGetAllRoles.RUnlock()
	return calls
}
